package com.olegtimermanis.tim_calc;

import android.annotation.SuppressLint;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.os.Handler;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;



import java.math.*;
import java.util.Timer;
import java.util.TimerTask;

/**
 * An example full-screen activity that shows and hides the system UI (i.e.
 * status bar and navigation/system bar) with user interaction.
 */
public class FullscreenActivity extends AppCompatActivity {
    public String num = "";
    public String numtop = "";

    public String num1 = "";
    public String num2 = "";

    public String symb = "";

    public int eqdown = 0;
    public int eqdowncheck = 0;
    public int await123 = 0;
    public String check123 = "";
    /**
     * Whether or not the system UI should be auto-hidden after
     * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
     */
    private static final boolean AUTO_HIDE = true;

    /**
     * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
     * user interaction before hiding the system UI.
     */
    private static final int AUTO_HIDE_DELAY_MILLIS = 350;

    /**
     * Some older devices needs a small delay between UI widget updates
     * and a change of the status and navigation bar.
     */
    private static final int UI_ANIMATION_DELAY = 600;
    private final Handler mHideHandler = new Handler();
    private View mContentView;
    private final Runnable mHidePart2Runnable = new Runnable() {
        @SuppressLint("InlinedApi")
        @Override
        public void run() {
            // Delayed removal of status and navigation bar

            // Note that some of these constants are new as of API 16 (Jelly Bean)
            // and API 19 (KitKat). It is safe to use them, as they are inlined
            // at compile-time and do nothing on earlier devices.
            mContentView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE
                    | View.SYSTEM_UI_FLAG_FULLSCREEN
                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
        }
    };
    private View mControlsView;
    private final Runnable mShowPart2Runnable = new Runnable() {
        @Override
        public void run() {
            // Delayed display of UI elements
            ActionBar actionBar = getSupportActionBar();
            if (actionBar != null) {
                actionBar.show();
            }
            mControlsView.setVisibility(View.VISIBLE);
        }
    };
    private boolean mVisible;
    private final Runnable mHideRunnable = new Runnable() {
        @Override
        public void run() {
            hide();
        }
    };
    /**
     * Touch listener to use for in-layout UI controls to delay hiding the
     * system UI. This is to prevent the jarring behavior of controls going away
     * while interacting with activity UI.
     */
    private final View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
        @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            switch (motionEvent.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    if (AUTO_HIDE) {
                        delayedHide(AUTO_HIDE_DELAY_MILLIS);
                    }
                    break;
                case MotionEvent.ACTION_UP:
                    view.performClick();
                    break;
                default:
                    break;
            }
            return false;
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_fullscreen);
        mVisible = true;
        mControlsView = findViewById(R.id.fullscreen_content_controls);
        mContentView = findViewById(R.id.fullscreen_content);

        Button button = (Button) findViewById(R.id.buttoneq);

        button.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {

                    eqdown=1;
                    timer();
                }

                if (event.getAction() == MotionEvent.ACTION_UP) {

                    eqdown=0;
                    afterlong();
                }
                return false;
            }
        });


    }

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        // Trigger the initial hide() shortly after the activity has been
        // created, to briefly hint to the user that UI controls
        // are available.
        delayedHide(100);
    }

    private void toggle() {
        if (mVisible) {
            hide();
        } else {
            show();
        }
    }

    private void hide() {
        // Hide UI first
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.hide();
        }
        mControlsView.setVisibility(View.GONE);
        mVisible = false;

        // Schedule a runnable to remove the status and navigation bar after a delay
        mHideHandler.removeCallbacks(mShowPart2Runnable);
        mHideHandler.postDelayed(mHidePart2Runnable, UI_ANIMATION_DELAY);
    }

    private void show() {
        // Show the system bar
        mContentView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
        mVisible = true;

        // Schedule a runnable to display UI elements after a delay
        mHideHandler.removeCallbacks(mHidePart2Runnable);
        mHideHandler.postDelayed(mShowPart2Runnable, UI_ANIMATION_DELAY);
    }

    /**
     * Schedules a call to hide() in delay milliseconds, canceling any
     * previously scheduled calls.
     */
    private void delayedHide(int delayMillis) {
        mHideHandler.removeCallbacks(mHideRunnable);
        mHideHandler.postDelayed(mHideRunnable, delayMillis);
    }

    public void onClick0(View view) {
        if (numtop.length()>-1) {
        num = "0";
        an();
    }}
    public void onClick1(View view) {
        num = "1";
        an();

    }
    public void onClick2(View view) {
        num = "2";
        an();

    }
    public void onClick3(View view) {
        num = "3";
        an();

    }
    public void onClick4(View view) {
        num = "4";
        an();
    }

    public void onClick5(View view) {
        num = "5";
        an();
    }
    public void onClick6(View view) {
        num = "6";
        an();
    }
    public void onClick7(View view) {
        num = "7";
        an();
    }
    public void onClick8(View view) {
        num = "8";
        an();
    }
    public void onClick9(View view) {
        num = "9";
        an();
    }

    public void onClickcomma(View view) {
    if   (numtop.contains(".")) {
    }
    else
    {
          if (numtop.length()>0) {

        num = ".";
        an();
    }

    }
    }

    public void onClickplus(View view) {
        num = "plus";
        calc();
    }
    public void onClickminus(View view) {
        num = "minus";
        calc();
    }
    public void onClickmult(View view) {
        num = "mult";
        calc();
    }
    public void onClickdiv(View view) {
        num = "div";
        calc();
    }

    public void onClickeq(View view) {
        calc();
    }

    public void onClickclear(View view) {
        onClickclearw();
    }
    public void onClickclearw() {
        numtop ="";
        num ="";
          num1 = "";
          num2 = "";

        symb = "";

        TextView textView2 = findViewById(R.id.symbol);
            textView2.setText("");

        TextView textView3 = findViewById(R.id.undertop);
        textView3.setText("");

        TextView textView = findViewById(R.id.fullscreen_content);
        textView.setText("_");
    }


    public void an(){
        if (await123>0){
            if (num=="1"&&await123==1){
                await123++;
            }
            if (num=="2"&&await123==2){
                await123++;
            }
           if (num=="3"&&await123==3){
              opensecret();
           }

           if (num=="4"||num=="5"||num=="6"||num=="7"||num=="8"||num=="9"||num=="0"
                   ||num=="mult"||num=="div"||num=="plus"||num=="minus"||num=="."||num=="eq"){
                await123=0;
            }

        }

        if (symb.equals("")){
            num1 = "";
            TextView textView3 = findViewById(R.id.undertop);
            textView3.setText("");
        }
        if (numtop.length()<25) {
            numtop = numtop + num;
            TextView textView = findViewById(R.id.fullscreen_content);
            textView.setText(numtop);
        }
    }

    public void calc(){

        if (num1.equals("")){
            num1 = numtop;
            TextView textView = findViewById(R.id.fullscreen_content);
            textView.setText("");

            TextView textView2 = findViewById(R.id.symbol);

            if (num.equals("plus")){
            textView2.setText(" + ");}
            if (num.equals("minus")){
                textView2.setText(" - ");}
            if (num.equals("mult")){
                textView2.setText(" * ");}
            if (num.equals("div")){
                textView2.setText(" / ");}
         //   if (num.equals("eq")){
             //   textView2.setText("=");}

            TextView textView3 = findViewById(R.id.undertop);
            textView3.setText(num1);

            symb=num;
            num = "";
            numtop = "";
            an();
        }
        else{

            if (numtop.equals("")) {
                TextView textView2 = findViewById(R.id.symbol);
                if (num.equals("plus")){
                    textView2.setText(" + ");}
                if (num.equals("minus")){
                    textView2.setText(" - ");}
                if (num.equals("mult")){
                    textView2.setText(" * ");}
                if (num.equals("div")){
                    textView2.setText(" / ");}
                symb=num;
                num = "";
            }
            else{
            num2 = numtop;
            calcul();
        }}

    }

    public void calcul() {

        BigDecimal bignum1 = new BigDecimal(num1);
        BigDecimal bignum2 = new BigDecimal(num2);

        if (symb.equals("plus")){
            BigDecimal result = bignum1.add(bignum2);
            num1 = result.toString();
        }
        if (symb.equals("minus")){
            BigDecimal result = bignum1.subtract(bignum2);
            num1 = result.toString();
        }
        if (symb.equals("mult")){
            BigDecimal result = bignum1.multiply(bignum2);
            num1 = result.toString();
        }
        if (symb.equals("div")){
            BigDecimal result = bignum1.divide(bignum2, 5, RoundingMode.HALF_UP);
            num1 = result.toString();
        }


        num = "";
        numtop = "";
        num2 = "";
        symb="";

        TextView textView = findViewById(R.id.fullscreen_content);
        textView.setText("");

        TextView textView2 = findViewById(R.id.symbol);
        textView2.setText("");

        TextView textView3 = findViewById(R.id.undertop);
        textView3.setText(num1);
    }

   public void timer(){
       Handler handler = new Handler();
       Timer t = new Timer();
       t.schedule(new TimerTask() {
           public void run() {
               handler.post(new Runnable() {
                   public void run() {//
                       timer2();
                   }//
               });
           }
       }, 100);
    }

    public void timer2(){
if (eqdown==1){
    eqdowncheck++;
    timer();
}
    }

    public void afterlong(){
        if (eqdowncheck>40){
            eqdowncheck=0;
            await123=1;
            timer3();
            check123="";

        }
    }

    public void timer3(){
        Handler handler = new Handler();
        Timer t = new Timer();
        t.schedule(new TimerTask() {
            public void run() {
                handler.post(new Runnable() {
                    public void run() {//
                        timer4();
                    }//
                });
            }
        }, 5000);
    }

    public void timer4(){
        await123=0;
    }

    public void opensecret(){
        onClickclearw();

        View bz3 = findViewById(R.id.secret_menu);
        bz3.setVisibility(View.VISIBLE);
    }

    public void closecret(View view){
        View bz3 = findViewById(R.id.secret_menu);
        bz3.setVisibility(View.GONE);
    }

}
